#!/bin/bash

# üó∫Ô∏è Test Maximum Map Space
# Verify map takes up maximum space in its container

echo "üó∫Ô∏è Testing Maximum Map Space"
echo "============================"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "\n${YELLOW}1. Checking Map Component Changes${NC}"

# Check if default className was updated
if grep -q "className = \"h-full w-full\"" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Default className updated to h-full w-full${NC}"
else
    echo -e "  ${RED}‚ùå Default className not updated${NC}"
fi

# Check if CardContent has flex-1
if grep -q "CardContent className=\"p-0 relative flex-1\"" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ CardContent has flex-1 for expansion${NC}"
else
    echo -e "  ${RED}‚ùå CardContent missing flex-1${NC}"
fi

# Check if map container has flex-1
if grep -q "className=\"relative flex-1\"" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Map container has flex-1 for expansion${NC}"
else
    echo -e "  ${RED}‚ùå Map container missing flex-1${NC}"
fi

# Check if map div has h-full
if grep -q "h-full.*relative overflow-hidden cursor-grab" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Map div has h-full for full height${NC}"
else
    echo -e "  ${RED}‚ùå Map div missing h-full${NC}"
fi

echo -e "\n${YELLOW}2. Checking View Components${NC}"

# Check PublicView container structure
if grep -q "h-screen flex flex-col" frontend/src/pages/PublicView.tsx; then
    echo -e "  ${GREEN}‚úÖ PublicView has h-screen flex flex-col${NC}"
else
    echo -e "  ${RED}‚ùå PublicView missing proper container structure${NC}"
fi

# Check FieldView container structure
if grep -q "h-screen flex flex-col" frontend/src/pages/FieldView.tsx; then
    echo -e "  ${GREEN}‚úÖ FieldView has h-screen flex flex-col${NC}"
else
    echo -e "  ${RED}‚ùå FieldView missing proper container structure${NC}"
fi

# Check CommandView container structure
if grep -q "h-screen flex flex-col" frontend/src/pages/CommandView.tsx; then
    echo -e "  ${GREEN}‚úÖ CommandView has h-screen flex flex-col${NC}"
else
    echo -e "  ${RED}‚ùå CommandView missing proper container structure${NC}"
fi

# Check if all views have flex-shrink-0 headers
if grep -q "flex-shrink-0" frontend/src/pages/PublicView.tsx && \
   grep -q "flex-shrink-0" frontend/src/pages/FieldView.tsx && \
   grep -q "flex-shrink-0" frontend/src/pages/CommandView.tsx; then
    echo -e "  ${GREEN}‚úÖ All views have flex-shrink-0 headers${NC}"
else
    echo -e "  ${RED}‚ùå Some views missing flex-shrink-0 headers${NC}"
fi

# Check if all views have flex-1 map containers
if grep -q "flex-1 p-4" frontend/src/pages/PublicView.tsx && \
   grep -q "flex-1 p-4" frontend/src/pages/FieldView.tsx && \
   grep -q "flex-1 p-4" frontend/src/pages/CommandView.tsx; then
    echo -e "  ${GREEN}‚úÖ All views have flex-1 map containers${NC}"
else
    echo -e "  ${RED}‚ùå Some views missing flex-1 map containers${NC}"
fi

# Check if all views pass h-full to DisasterMap
if grep -q "className=\"h-full w-full\"" frontend/src/pages/PublicView.tsx && \
   grep -q "className=\"h-full w-full\"" frontend/src/pages/FieldView.tsx && \
   grep -q "className=\"h-full w-full\"" frontend/src/pages/CommandView.tsx; then
    echo -e "  ${GREEN}‚úÖ All views pass h-full w-full to DisasterMap${NC}"
else
    echo -e "  ${RED}‚ùå Some views not passing h-full w-full to DisasterMap${NC}"
fi

echo -e "\n${YELLOW}3. Checking Frontend Server${NC}"
if curl -s http://localhost:3000 > /dev/null; then
    echo -e "  ${GREEN}‚úÖ Frontend server is running${NC}"
else
    echo -e "  ${RED}‚ùå Frontend server is not running${NC}"
    exit 1
fi

echo -e "\n${YELLOW}4. Maximum Map Space Summary${NC}"
echo "====================================="
echo -e "${GREEN}‚úÖ Map Component Changes:${NC}"
echo "  ‚Ä¢ Default className: h-full w-full"
echo "  ‚Ä¢ CardContent: flex-1 for expansion"
echo "  ‚Ä¢ Map container: flex-1 for expansion"
echo "  ‚Ä¢ Map div: h-full for full height"

echo -e "\n${GREEN}‚úÖ View Component Changes:${NC}"
echo "  ‚Ä¢ Container: h-screen flex flex-col"
echo "  ‚Ä¢ Header: flex-shrink-0 (fixed size)"
echo "  ‚Ä¢ Map container: flex-1 (expands to fill)"
echo "  ‚Ä¢ DisasterMap: h-full w-full (fills container)"

echo -e "\n${GREEN}‚úÖ Layout Benefits:${NC}"
echo "  ‚Ä¢ Map takes maximum available space"
echo "  ‚Ä¢ Responsive to different screen sizes"
echo "  ‚Ä¢ Header stays fixed at top"
echo "  ‚Ä¢ Map expands to fill remaining space"

echo -e "\n${YELLOW}5. Manual Testing Instructions${NC}"
echo "====================================="
echo -e "\n${BLUE}Open http://localhost:3000 in your browser and verify:${NC}"
echo ""
echo "1. **Full Screen Coverage:**"
echo "   ‚Ä¢ Map should fill the entire available space"
echo "   ‚Ä¢ No wasted space around the map"
echo "   ‚Ä¢ Map extends to edges of container"
echo ""
echo "2. **Responsive Behavior:**"
echo "   ‚Ä¢ Resize browser window - map should adapt"
echo "   ‚Ä¢ Map should always take maximum space"
echo "   ‚Ä¢ Header should stay fixed at top"
echo ""
echo "3. **All Views:**"
echo "   ‚Ä¢ Test Public, Field, and Command views"
echo "   ‚Ä¢ Each should have maximum map space"
echo "   ‚Ä¢ Consistent behavior across all views"
echo ""
echo "4. **Interactive Features:**"
echo "   ‚Ä¢ Pan and zoom should work in full space"
echo "   ‚Ä¢ Tile layer controls should be accessible"
echo "   ‚Ä¢ No clipping or overflow issues"

echo -e "\n${YELLOW}6. Expected Behavior${NC}"
echo "=========================="
echo "‚úÖ Map fills entire available space"
echo "‚úÖ Responsive to screen size changes"
echo "‚úÖ Header remains fixed at top"
echo "‚úÖ No wasted space around map"
echo "‚úÖ Consistent across all views"
echo "‚úÖ All interactive features work"
echo "‚úÖ Professional, immersive experience"

echo -e "\n${GREEN}üéâ Maximum Map Space Achieved!${NC}"
echo -e "\n${BLUE}Next Steps:${NC}"
echo "1. Verify full-screen map experience"
echo "2. Test responsive behavior"
echo "3. Confirm all views work properly"
echo "4. Ready for element re-addition"

echo -e "\n${GREEN}‚úÖ Map now takes maximum space in its container!${NC}"
