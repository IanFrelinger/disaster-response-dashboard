#!/bin/bash

# üó∫Ô∏è Test Clean Map State
# Verify all map elements have been removed for fresh start

echo "üó∫Ô∏è Testing Clean Map State"
echo "=========================="

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "\n${YELLOW}1. Checking Removed Elements${NC}"

# Check if hazards layer was removed
if ! grep -q "mockHazards" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Hazards layer removed${NC}"
else
    echo -e "  ${RED}‚ùå Hazards layer still present${NC}"
fi

# Check if routes layer was removed
if ! grep -q "mockRoutes" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Routes layer removed${NC}"
else
    echo -e "  ${RED}‚ùå Routes layer still present${NC}"
fi

# Check if resources layer was removed
if ! grep -q "mockResources" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Resources layer removed${NC}"
else
    echo -e "  ${RED}‚ùå Resources layer still present${NC}"
fi

# Check if boundaries layer was removed
if ! grep -q "boundaries" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Boundaries layer removed${NC}"
else
    echo -e "  ${RED}‚ùå Boundaries layer still present${NC}"
fi

# Check if legend was removed
if ! grep -q "Legend" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Map legend removed${NC}"
else
    echo -e "  ${RED}‚ùå Map legend still present${NC}"
fi

# Check if zoom controls were removed
if ! grep -q "handleZoomIn\|handleZoomOut" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Zoom controls removed${NC}"
else
    echo -e "  ${RED}‚ùå Zoom controls still present${NC}"
fi

# Check if layer visibility state was removed
if ! grep -q "layerVisibility" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Layer visibility state removed${NC}"
else
    echo -e "  ${RED}‚ùå Layer visibility state still present${NC}"
fi

echo -e "\n${YELLOW}2. Checking Remaining Core Elements${NC}"

# Check if basic map structure remains
if grep -q "mapContainer" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Map container structure intact${NC}"
else
    echo -e "  ${RED}‚ùå Map container structure missing${NC}"
fi

# Check if tile layer controls remain
if grep -q "tileLayer" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Tile layer controls intact${NC}"
else
    echo -e "  ${RED}‚ùå Tile layer controls missing${NC}"
fi

# Check if pan functionality remains
if grep -q "handleMouseDown\|handleMouseMove\|handleMouseUp" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Pan functionality intact${NC}"
else
    echo -e "  ${RED}‚ùå Pan functionality missing${NC}"
fi

# Check if wheel zoom remains
if grep -q "handleWheel" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Wheel zoom functionality intact${NC}"
else
    echo -e "  ${RED}‚ùå Wheel zoom functionality missing${NC}"
fi

# Check if loading/error states remain
if grep -q "isLoading\|error" frontend/src/components/common/DisasterMap.tsx; then
    echo -e "  ${GREEN}‚úÖ Loading/error states intact${NC}"
else
    echo -e "  ${RED}‚ùå Loading/error states missing${NC}"
fi

echo -e "\n${YELLOW}3. Checking Frontend Server${NC}"
if curl -s http://localhost:3000 > /dev/null; then
    echo -e "  ${GREEN}‚úÖ Frontend server is running${NC}"
else
    echo -e "  ${RED}‚ùå Frontend server is not running${NC}"
    exit 1
fi

echo -e "\n${YELLOW}4. Clean Map State Summary${NC}"
echo "================================="
echo -e "${GREEN}‚úÖ Removed Elements:${NC}"
echo "  ‚Ä¢ Hazards layer (mockHazards)"
echo "  ‚Ä¢ Routes layer (mockRoutes)"
echo "  ‚Ä¢ Resources layer (mockResources)"
echo "  ‚Ä¢ Boundaries layer"
echo "  ‚Ä¢ Map legend"
echo "  ‚Ä¢ Zoom controls (+/- buttons)"
echo "  ‚Ä¢ Layer visibility state"
echo "  ‚Ä¢ Layer toggle buttons"

echo -e "\n${GREEN}‚úÖ Preserved Core Elements:${NC}"
echo "  ‚Ä¢ Map container structure"
echo "  ‚Ä¢ Tile layer controls (Street/Satellite/Terrain)"
echo "  ‚Ä¢ Pan functionality (mouse drag)"
echo "  ‚Ä¢ Wheel zoom functionality"
echo "  ‚Ä¢ Loading/error states"
echo "  ‚Ä¢ Basic map styling and grid"

echo -e "\n${YELLOW}5. Manual Testing Instructions${NC}"
echo "====================================="
echo -e "\n${BLUE}Open http://localhost:3000 in your browser and verify:${NC}"
echo ""
echo "1. **Clean Map Display:**"
echo "   ‚Ä¢ Map should show only background and grid"
echo "   ‚Ä¢ No hazards, routes, resources, or boundaries visible"
echo "   ‚Ä¢ No legend in bottom-right corner"
echo "   ‚Ä¢ No zoom controls in top-right corner"
echo ""
echo "2. **Remaining Functionality:**"
echo "   ‚Ä¢ Tile layer buttons should work (Street/Satellite/Terrain)"
echo "   ‚Ä¢ Mouse drag should pan the map"
echo "   ‚Ä¢ Mouse wheel should zoom in/out"
echo "   ‚Ä¢ Zoom level should update in header"
echo ""
echo "3. **Visual Appearance:**"
echo "   ‚Ä¢ Clean, minimal map display"
echo "   ‚Ä¢ Background changes with tile layer selection"
echo "   ‚Ä¢ Grid pattern visible and responsive to zoom"
echo "   ‚Ä¢ Professional, uncluttered appearance"

echo -e "\n${YELLOW}6. Ready for Element Re-addition${NC}"
echo "====================================="
echo "‚úÖ Map is now clean and ready for elements to be re-added one by one"
echo "‚úÖ Core functionality (pan, zoom, tile layers) is preserved"
echo "‚úÖ Clean slate for systematic element addition"
echo "‚úÖ No visual clutter or overlapping elements"

echo -e "\n${GREEN}üéâ Clean Map State Achieved!${NC}"
echo -e "\n${BLUE}Next Steps:${NC}"
echo "1. Verify clean state in browser"
echo "2. Plan element re-addition order"
echo "3. Add elements one by one"
echo "4. Test each addition thoroughly"

echo -e "\n${GREEN}‚úÖ Map is now clean and ready for systematic element re-addition!${NC}"
