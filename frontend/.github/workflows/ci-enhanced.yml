name: Enhanced CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CI: true

jobs:
  # Type checking and linting (fastest feedback)
  type-check:
    name: Type Check & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Type check
      run: npm run typecheck
    
    - name: Lint with ESLint
      run: npm run lint
    
    - name: Check API contracts
      run: npm run api:check
    
    - name: Check design tokens
      run: npm run lint:design-tokens

  # Unit tests (60% of testing pyramid)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: type-check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unit
        name: unit-coverage

  # Component tests (25% of testing pyramid)
  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: type-check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run component tests
      run: npm run test:component
      env:
        NODE_ENV: test
    
    - name: Run accessibility tests
      run: npm run test:a11y
      env:
        NODE_ENV: test

  # Integration tests (10% of testing pyramid)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [type-check, unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run integration tests
      run: npm run test:int
      env:
        NODE_ENV: test

  # E2E tests (5% of testing pyramid)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [type-check, unit-tests, component-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run E2E smoke tests
      run: npm run test:e2e:smoke
      env:
        NODE_ENV: test
    
    - name: Run E2E layer tests
      run: npm run test:e2e:layers
      env:
        NODE_ENV: test

  # Performance tests (non-blocking)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [type-check, unit-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance tests
      run: npm run test:performance
      env:
        NODE_ENV: test
    
    - name: Check performance budgets
      run: npm run test:performance:budget
      env:
        NODE_ENV: test

  # Visual regression tests (non-blocking)
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [type-check, unit-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run visual regression tests
      run: npm run test:visual
      env:
        NODE_ENV: test

  # Security scan (non-blocking)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: type-check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run dependency check
      run: npm run security:check

  # Build and bundle analysis
  build-analysis:
    name: Build Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [type-check, unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Analyze bundle
      run: npm run analyze:bundle
    
    - name: Check bundle size
      run: npm run test:bundle:size

  # Quarantine lane (scheduled, non-blocking)
  quarantine-tests:
    name: Quarantine Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [type-check, unit-tests, component-tests, integration-tests, e2e-tests]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        test-suite: [stress, extended, visual-full]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run ${{ matrix.test-suite }} tests
      run: npm run test:${{ matrix.test-suite }}
      env:
        NODE_ENV: test
        TEST_RETRIES: 3

  # Final status check
  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [type-check, unit-tests, component-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Check job statuses
      run: |
        if [[ "${{ needs.type-check.result }}" == "failure" ]] || \
           [[ "${{ needs.unit-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.component-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.integration-tests.result }}" == "failure" ]] || \
           [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
          echo "❌ Critical tests failed"
          exit 1
        else
          echo "✅ All critical tests passed"
        fi

