name: CI Gates - Compile-Time & Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Compile-time guarantees
  typescript-compile:
    name: TypeScript Compilation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: TypeScript build surface check
        working-directory: frontend
        run: npm run typecheck:build
      
      - name: TypeScript test files check (non-blocking)
        working-directory: frontend
        run: npm run typecheck:tests
        continue-on-error: true

  # Linting and code quality
  lint-and-quality:
    name: Linting & Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: ESLint check
        working-directory: frontend
        run: npx eslint src --ext .ts,.tsx --max-warnings 0
      
      - name: Check for unused code
        working-directory: frontend
        run: |
          npx tsc --noEmit \
            --noUnusedLocals \
            --noUnusedParameters

  # Contract drift detection
  contract-validation:
    name: Contract Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Validate Zod schemas
        working-directory: frontend
        run: npx tsc --noEmit src/validation/schemas.ts
      
      - name: Check domain types
        working-directory: frontend
        run: npx tsc --noEmit src/types/domain.ts

  # Performance budgets
  performance-budgets:
    name: Performance Budgets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Build application
        working-directory: frontend
        run: npm run build
      
      - name: Type check build surface
        working-directory: frontend
        run: npm run typecheck:build
      
      - name: Check bundle size
        working-directory: frontend
        run: |
          # Check if dist directory exists and has reasonable sizes
          if [ -d "dist" ]; then
            echo "Bundle sizes:"
            du -h dist/*
            
            # Check for any files over 1MB
            find dist -type f -size +1M | head -10
          fi

  # Error testing validation
  error-testing:
    name: Error Testing Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run error tests
        working-directory: frontend
        run: npm run test:errors:all
      
      - name: Validate fault injection system
        working-directory: frontend
        run: npx tsc --noEmit src/testing/fault-injection.ts
      
      - name: Check error catalog
        working-directory: frontend
        run: npx tsc --noEmit src/testing/error-catalog.ts

  # Determinism and observability
  determinism-observability:
    name: Determinism & Observability
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Test determinism utilities
        working-directory: frontend
        run: npx tsc --noEmit src/testing/utils/determinism.ts
      
      - name: Test observability utilities
        working-directory: frontend
        run: npx tsc --noEmit src/testing/utils/observability.ts
      
      - name: Run fault combination tests
        working-directory: frontend
        run: npx vitest run src/testing/tests/fault-combinations.test.ts

  # Final validation
  final-validation:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [typescript-compile, lint-and-quality, contract-validation, performance-budgets, error-testing, determinism-observability]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run all tests
        working-directory: frontend
        run: npm test
      
      - name: Generate test coverage
        working-directory: frontend
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
