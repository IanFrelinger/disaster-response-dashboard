#!/usr/bin/env node
/**
 * Simple Frontend Verification Test
 * Basic UI functionality check after cleanup
 */

const { chromium } = require('playwright');

async function runSimpleVerification() {
    console.log('üîç Starting Simple Frontend Verification');
    console.log('='.repeat(50));
    
    const browser = await chromium.launch({ 
        headless: false,
        slowMo: 200
    });
    
    const context = await browser.newContext({
        viewport: { width: 1920, height: 1080 }
    });
    
    const page = await context.newPage();
    
    try {
        // Test 1: Basic Page Load
        console.log('\nüìÑ Test 1: Basic Page Load');
        console.log('-'.repeat(30));
        
        await page.goto('http://localhost:3000', { waitUntil: 'networkidle' });
        console.log('‚úÖ Page loaded successfully');
        
        const title = await page.title();
        console.log(`‚úÖ Page title: ${title}`);
        
        // Test 2: Main Content
        console.log('\nüéØ Test 2: Main Content');
        console.log('-'.repeat(30));
        
        const rootElement = await page.locator('#root').isVisible();
        console.log(`‚úÖ Root element visible: ${rootElement}`);
        
        // Check for any heading
        const headings = await page.locator('h1, h2, h3').count();
        console.log(`‚úÖ Headings found: ${headings}`);
        
        // Test 3: Navigation
        console.log('\nüß≠ Test 3: Navigation');
        console.log('-'.repeat(30));
        
        // Look for any navigation links
        const navLinks = await page.locator('nav a, a[href]').count();
        console.log(`‚úÖ Navigation links found: ${navLinks}`);
        
        // Test 4: Map Component
        console.log('\nüó∫Ô∏è Test 4: Map Component');
        console.log('-'.repeat(30));
        
        // Check for Mapbox elements
        const mapboxElements = await page.locator('.mapboxgl-canvas-container, .mapboxgl-canvas').count();
        console.log(`‚úÖ Mapbox elements found: ${mapboxElements}`);
        
        // Check for any canvas elements (maps usually use canvas)
        const canvasElements = await page.locator('canvas').count();
        console.log(`‚úÖ Canvas elements found: ${canvasElements}`);
        
        // Test 5: Interactive Elements
        console.log('\nüñ±Ô∏è Test 5: Interactive Elements');
        console.log('-'.repeat(30));
        
        // Look for buttons
        const buttons = await page.locator('button').count();
        console.log(`‚úÖ Buttons found: ${buttons}`);
        
        // Look for clickable elements
        const clickableElements = await page.locator('button, a, [role="button"]').count();
        console.log(`‚úÖ Clickable elements found: ${clickableElements}`);
        
        // Test 6: Data Display
        console.log('\nüìä Test 6: Data Display');
        console.log('-'.repeat(30));
        
        // Look for any text content that might indicate data
        const textContent = await page.locator('body').textContent();
        const hasData = textContent.includes('hazard') || textContent.includes('unit') || textContent.includes('route');
        console.log(`‚úÖ Data content detected: ${hasData}`);
        
        // Test 7: Responsive Check
        console.log('\nüì± Test 7: Responsive Check');
        console.log('-'.repeat(30));
        
        // Test mobile viewport
        await page.setViewportSize({ width: 768, height: 1024 });
        console.log('‚úÖ Mobile viewport applied');
        
        // Check if content is still visible
        const mobileContent = await page.locator('#root').isVisible();
        console.log(`‚úÖ Content visible on mobile: ${mobileContent}`);
        
        // Reset to desktop
        await page.setViewportSize({ width: 1920, height: 1080 });
        console.log('‚úÖ Desktop viewport restored');
        
        // Test 8: Console Errors
        console.log('\n‚ö†Ô∏è Test 8: Console Errors');
        console.log('-'.repeat(30));
        
        const consoleErrors = [];
        page.on('console', msg => {
            if (msg.type() === 'error') {
                consoleErrors.push(msg.text());
            }
        });
        
        // Reload page to capture errors
        await page.reload({ waitUntil: 'networkidle' });
        console.log(`‚úÖ Console errors found: ${consoleErrors.length}`);
        
        if (consoleErrors.length > 0) {
            console.log('‚ö†Ô∏è Console errors:');
            consoleErrors.forEach(error => console.log(`   - ${error}`));
        }
        
        // Test 9: Network Requests
        console.log('\nüåê Test 9: Network Requests');
        console.log('-'.repeat(30));
        
        const requests = [];
        page.on('request', request => {
            requests.push(request.url());
        });
        
        // Navigate to trigger requests
        await page.goto('http://localhost:3000', { waitUntil: 'networkidle' });
        
        const apiRequests = requests.filter(url => url.includes('/api/'));
        console.log(`‚úÖ API requests made: ${apiRequests.length}`);
        
        // Test 10: Final State
        console.log('\n‚úÖ Test 10: Final State');
        console.log('-'.repeat(30));
        
        const finalUrl = page.url();
        console.log(`‚úÖ Final URL: ${finalUrl}`);
        
        const finalTitle = await page.title();
        console.log(`‚úÖ Final title: ${finalTitle}`);
        
        // Check if page is still responsive
        const bodyText = await page.locator('body').textContent();
        console.log(`‚úÖ Page has content: ${bodyText.length > 0}`);
        
        console.log('\nüéâ Simple Frontend Verification Completed!');
        
        // Summary
        console.log('\nüìã Summary:');
        console.log('-'.repeat(30));
        console.log(`‚úÖ Page loads: Yes`);
        console.log(`‚úÖ Navigation works: ${navLinks > 0}`);
        console.log(`‚úÖ Map component: ${mapboxElements > 0 || canvasElements > 0}`);
        console.log(`‚úÖ Interactive elements: ${clickableElements > 0}`);
        console.log(`‚úÖ Data integration: ${hasData}`);
        console.log(`‚úÖ Responsive design: ${mobileContent}`);
        console.log(`‚úÖ No console errors: ${consoleErrors.length === 0}`);
        console.log(`‚úÖ API integration: ${apiRequests.length > 0}`);
        
    } catch (error) {
        console.error('‚ùå Simple Verification Failed:', error);
        throw error;
    } finally {
        await browser.close();
    }
}

// Run the verification
runSimpleVerification().catch(console.error);
