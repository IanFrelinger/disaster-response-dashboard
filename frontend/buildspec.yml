version: 0.2

env:
  variables:
    IMAGE_REPO_NAME: disaster-response-frontend
    IMAGE_TAG: latest
    FRONTEND_PORT: 8080

phases:
  install:
    runtime-versions:
      nodejs: 18
      docker: 20
    commands:
      - echo "Installing dependencies..."
      - npm ci --only=production
      - echo "Dependencies installed successfully"
  
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo "Repository URI: $REPOSITORY_URI"
      - echo "Image tag: $IMAGE_TAG"
  
  build:
    commands:
      - echo "Building frontend application..."
      - npm run build
      - echo "Frontend build completed successfully"
      - echo "Building Docker image..."
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:latest
      - echo "Docker image built successfully"
  
  post_build:
    commands:
      - echo "Pushing Docker image to ECR..."
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - echo "Docker image pushed successfully"
      - echo "Creating imagedefinitions.json..."
      - printf '[{"name":"disaster-response-frontend","imageUri":"%s"}]' "$REPOSITORY_URI:$IMAGE_TAG" > imagedefinitions.json
      - echo "Build completed successfully on $(date)"

artifacts:
  files:
    - imagedefinitions.json
    - appspec.yml
    - taskdef.json
  discard-paths: no
  name: frontend-artifacts-$CODEBUILD_BUILD_NUMBER
