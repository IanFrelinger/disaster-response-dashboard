version: '3.8'

services:
  # Disaster Response Dashboard Backend
  disaster-dashboard-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: disaster-dashboard-backend
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - FLASK_PORT=8000
      - ENVIRONMENT_MODE=demo
      - USE_SYNTHETIC_DATA=true
      - PYTHONPATH=/app
      - GDAL_DATA=/usr/share/gdal
      - PROJ_LIB=/usr/share/proj
    volumes:
      # Mount backend code for development
      - ./backend:/app
      # Mount data directory for street data
      - ./data:/app/data:ro
      # Mount street network data
      - ./data/street_network:/app/data/street_network:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - disaster-network
    depends_on:
      - postgres
      - redis

  # Disaster Response Dashboard Frontend
  disaster-dashboard-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_MAPBOX_ACCESS_TOKEN: ${VITE_MAPBOX_ACCESS_TOKEN:-your_mapbox_token_here}
        VITE_MAPBOX_STYLE_URL: ${VITE_MAPBOX_STYLE_URL:-mapbox://styles/mapbox/satellite-streets-v12}
        VITE_DEBUG_MODE: ${VITE_DEBUG_MODE:-false}
        VITE_BUILD_ENV: ${VITE_BUILD_ENV:-production}
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
        REACT_APP_MAPBOX_TOKEN: ${REACT_APP_MAPBOX_TOKEN:-your_mapbox_token_here}
    container_name: disaster-dashboard-frontend
    ports:
      - "8080:8080"
    environment:
      - REACT_APP_API_URL=http://disaster-dashboard-backend:8000
      - REACT_APP_MAPBOX_TOKEN=${REACT_APP_MAPBOX_TOKEN:-your_mapbox_token_here}
      - VITE_MAPBOX_ACCESS_TOKEN=${VITE_MAPBOX_ACCESS_TOKEN:-your_mapbox_token_here}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - disaster-network
    depends_on:
      - disaster-dashboard-backend

  # PostgreSQL for data storage
  postgres:
    image: postgres:15-alpine
    container_name: disaster-dashboard-db
    environment:
      POSTGRES_DB: disaster_dashboard
      POSTGRES_USER: dashboard_user
      POSTGRES_PASSWORD: dashboard_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dashboard_user -d disaster_dashboard"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - disaster-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: disaster-dashboard-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - disaster-network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: disaster-dashboard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    restart: unless-stopped
    depends_on:
      - disaster-dashboard-frontend
      - disaster-dashboard-backend
    networks:
      - disaster-network

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: disaster-dashboard-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - disaster-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: disaster-dashboard-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - disaster-network

networks:
  disaster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
