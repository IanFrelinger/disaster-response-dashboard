services:
  video-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: disaster-response-video-pipeline
    volumes:
      # Mount output directories for persistence
      - ./captures:/app/captures
      - ./audio:/app/audio
      - ./subs:/app/subs
      - ./luts:/app/luts
      - ./out:/app/out
      - ./voices:/app/voices
      # Mount configuration files
      - ./narration.yaml:/app/narration.yaml:ro
      - ./timeline.yaml:/app/timeline.yaml:ro
      - ./record.config.json:/app/record.config.json:ro
      # Mount environment file
      - ./config.env:/app/config.env:ro
    environment:
      # Load environment variables from config.env
      - ENV_FILE=/app/config.env
      # API key validation flag
      - API_KEYS_VALIDATED=false
    env_file:
      - config.env
    working_dir: /app
    # Keep container running
    command: ["tail", "-f", "/dev/null"]
    # Enable GPU support if available (optional)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    # For headless operation
    stdin_open: false
    tty: false
    # Restart policy
    restart: unless-stopped
    # Resource limits
    mem_limit: 4g
    cpus: 2.0

  # Optional: Web interface for monitoring (if needed)
  # web-monitor:
  #   image: nginx:alpine
  #   container_name: video-pipeline-monitor
  #   ports:
  #     - "8080:80"
  #   volumes:
  #     - ./out:/usr/share/nginx/html:ro
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - video-pipeline
  #   restart: unless-stopped

networks:
  default:
    name: video-pipeline-network
