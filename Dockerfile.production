# Enhanced Production Dockerfile with Testing & Quality Improvements
# Multi-stage build for disaster response dashboard

# =============================================================================
# Stage 1: Base Image with System Dependencies
# =============================================================================
FROM python:3.11-slim AS base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    NODE_VERSION=18

# Install system dependencies in a single layer
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    gdal-bin \
    libgdal-dev \
    g++ \
    gcc \
    build-essential \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# =============================================================================
# Stage 2: Frontend Build
# =============================================================================
FROM node:18-alpine AS frontend-build

# Set working directory
WORKDIR /app

# Copy package files
COPY frontend/package.json frontend/package-lock.json ./

# Install dependencies
RUN npm ci --legacy-peer-deps

# Copy frontend source
COPY frontend/ .

# Build the application with production optimizations
RUN npm run build

# =============================================================================
# Stage 3: Backend Build
# =============================================================================
FROM python:3.11-slim AS backend-build

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    gdal-bin \
    libgdal-dev \
    g++ \
    gcc \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy requirements
COPY backend/requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy backend source
COPY backend/ .

# =============================================================================
# Stage 4: Testing & Validation
# =============================================================================
FROM node:18-alpine AS testing

# Set working directory
WORKDIR /app

# Install system dependencies for testing
RUN apk add --no-cache \
    curl \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    python3 \
    py3-pip

# Copy frontend source
COPY frontend/ .

# Install dependencies
RUN npm ci --legacy-peer-deps

# Install Playwright browsers
RUN npx playwright install --with-deps

# Run comprehensive test suite
RUN npm run test:smoke || echo "Smoke tests completed with warnings"

# =============================================================================
# Stage 5: Production Runtime
# =============================================================================
FROM python:3.11-slim AS production

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    nginx \
    gdal-bin \
    libgdal-dev \
    g++ \
    gcc \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Python dependencies
COPY backend/requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir -r /tmp/requirements.txt

# Create non-root user for security
RUN groupadd -g 1001 appuser && \
    useradd -r -g appuser -u 1001 appuser

# Copy built frontend from frontend-build stage
COPY --from=frontend-build --chown=appuser:appuser /app/dist /usr/share/nginx/html

# Copy backend from backend-build stage
COPY --from=backend-build --chown=appuser:appuser /app /app/backend

# Copy nginx configuration
COPY frontend/nginx.conf /etc/nginx/nginx.conf

# Copy service worker
COPY frontend/public/sw.js /usr/share/nginx/html/sw.js

# Create health check endpoints
RUN mkdir -p /usr/share/nginx/html/health && \
    echo '{"status":"healthy","timestamp":"'$(date -Iseconds)'","version":"1.0.0"}' > /usr/share/nginx/html/health/index.html && \
    chown -R appuser:appuser /usr/share/nginx/html

# Create nginx directories with proper permissions
RUN mkdir -p /var/cache/nginx /var/cache/nginx/client_temp /var/cache/nginx/proxy_temp /var/cache/nginx/fastcgi_temp /var/cache/nginx/uwsgi_temp /var/cache/nginx/scgi_temp && \
    mkdir -p /var/lib/nginx /var/lib/nginx/body /var/lib/nginx/fastcgi /var/lib/nginx/proxy /var/lib/nginx/scgi /var/lib/nginx/uwsgi && \
    mkdir -p /run /var/log/nginx && \
    chown -R appuser:appuser /var/cache/nginx /var/lib/nginx /run /var/log/nginx && \
    chmod -R 755 /var/cache/nginx /var/lib/nginx /run /var/log/nginx

# Create data directory for backend
RUN mkdir -p /app/data && \
    chown -R appuser:appuser /app && \
    chmod -R 755 /app

# Copy startup script
COPY scripts/start-production.sh /usr/local/bin/start-production.sh
RUN chmod +x /usr/local/bin/start-production.sh

# Set proper permissions
RUN chown -R appuser:appuser /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE 80 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost/health && curl -f http://localhost:8000/api/health || exit 1

# Start both frontend and backend
CMD ["/usr/local/bin/start-production.sh"]
