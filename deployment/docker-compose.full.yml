services:
  # Backend API Service
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: disaster-response-backend
    ports:
      - "5001:8000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/disaster_response
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../data:/app/data
      - ../tiles:/app/tiles
    depends_on:
      - postgres
      - redis
    networks:
      - disaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: disaster-response-frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:5001
      - REACT_APP_ENVIRONMENT=production
    volumes:
      - ../frontend/public:/app/public
    depends_on:
      - backend
    networks:
      - disaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Video Production Service
  video-production:
    build:
      context: ../video-production
      dockerfile: Dockerfile
      target: production
    container_name: disaster-response-video
    ports:
      - "3001:3000"  # Video production web interface
      - "8081:8080"  # Video production API
    environment:
      - NODE_ENV=production
      - FFMPEG_BINARY=/usr/bin/ffmpeg
    volumes:
      - ../video-production/output:/app/output
      - ../video-production/assets:/app/assets
      - ../video-production/narration.yaml:/app/narration.yaml
    networks:
      - disaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Video production healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: disaster-response-postgres
    environment:
      - POSTGRES_DB=disaster_response
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - disaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: disaster-response-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - disaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: disaster-response-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - video-production
    networks:
      - disaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Service
  monitoring:
    image: prom/prometheus:latest
    container_name: disaster-response-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - disaster-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: disaster-response-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana:/etc/grafana/provisioning
    networks:
      - disaster-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  disaster-network:
    driver: bridge
    name: disaster-response-network
