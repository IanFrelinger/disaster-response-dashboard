version: '3.8'

services:
  # Backend API Service
  backend:
    build: 
      context: ../backend
      dockerfile: Dockerfile
    container_name: disaster-response-backend
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/disaster_response
      - REDIS_URL=redis://redis:6379
    volumes:
      - ../data:/app/data
      - ../tiles:/app/tiles
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - disaster-response-network

  # Frontend Application
  frontend:
    build: 
      context: ../frontend
      dockerfile: Dockerfile
    container_name: disaster-response-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - disaster-response-network

  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: disaster-response-postgres
    environment:
      POSTGRES_DB: disaster_response
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - disaster-response-network

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: disaster-response-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - disaster-response-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: disaster-response-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - disaster-response-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: disaster-response-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - disaster-response-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: disaster-response-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - disaster-response-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  disaster-response-network:
    driver: bridge
