name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FRONTEND_URL: http://localhost:3000
  BACKEND_URL: http://localhost:5001
  API_URL: http://localhost:5001/api

jobs:
  test:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    
    services:
      # Start Docker daemon
      docker:
        image: docker:dind
        options: >-
          --privileged
          --network-alias docker
        env:
          DOCKER_TLS_CERTDIR: /certs
        ports:
          - 2376:2376
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start Docker daemon
      run: |
        sudo systemctl start docker
        sudo docker info
    
    - name: Build test containers
      run: |
        docker-compose -f config/docker/docker-compose.yml build backend-test frontend-test
    
    - name: Start test containers
      run: |
        docker-compose -f config/docker/docker-compose.yml --profile test up -d backend-test frontend-test
        sleep 30
    
    - name: Run backend tests
      run: |
        docker exec docker-backend-test-1 python -m pytest tests/integration/test_api_integration.py -v --html=test-results/backend-integration-report.html
        docker exec docker-backend-test-1 python -m pytest --ignore=tests/integration -v --html=test-results/backend-unit-report.html
    
    - name: Run frontend tests
      run: |
        docker exec docker-frontend-test-1 npx playwright test tests/e2e/comprehensive-ui-test.spec.ts --reporter=html
        docker exec docker-frontend-test-1 npm run test -- --run --reporter=html
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          playwright-reports/
        retention-days: 30
    
    - name: Stop test containers
      if: always()
      run: |
        docker-compose -f config/docker/docker-compose.yml --profile test down

  # DEPLOYMENT DISABLED - Using local development workflow
  # deploy:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   
  #   services:
  #     docker:
  #       image: docker:dind
  #       options: >-
  #         --privileged
  #         --network-alias docker
  #       env:
  #         DOCKER_TLS_CERTDIR: /certs
  #       ports:
  #         - 2376:2376
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #   
  #   - name: Build production containers
  #     run: |
  #       docker-compose -f config/docker/docker-compose.yml build backend frontend
  #   
  #   - name: Deploy to production
  #     run: |
  #       docker-compose -f config/docker/docker-compose.yml up -d
  #       sleep 30
  #       
  #       # Health checks
  #       curl -f http://localhost:5001/api/health
  #       curl -f http://localhost:3000
  #       
  #       echo "Deployment successful!"
  #   
  #   - name: Notify deployment success
  #     run: |
  #       echo "üéâ Deployment to production completed successfully!"
  #       echo "Frontend: ${{ env.FRONTEND_URL }}"
  #       echo "Backend: ${{ env.BACKEND_URL }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start production containers
      run: |
        docker-compose -f config/docker/docker-compose.yml up -d
        sleep 30
    
    - name: Run performance tests
      run: |
        # Test API response time
        start_time=$(date +%s.%N)
        curl -s http://localhost:5001/api/health > /dev/null
        end_time=$(date +%s.%N)
        api_time=$(echo "$end_time - $start_time" | bc -l)
        echo "API response time: ${api_time}s"
        
        # Test frontend load time
        start_time=$(date +%s.%N)
        curl -s http://localhost:3000 > /dev/null
        end_time=$(date +%s.%N)
        frontend_time=$(echo "$end_time - $start_time" | bc -l)
        echo "Frontend load time: ${frontend_time}s"
        
        # Fail if performance is poor
        if (( $(echo "$api_time > 2.0" | bc -l) )); then
          echo "‚ùå API response time too slow: ${api_time}s"
          exit 1
        fi
        
        if (( $(echo "$frontend_time > 5.0" | bc -l) )); then
          echo "‚ùå Frontend load time too slow: ${frontend_time}s"
          exit 1
        fi
        
        echo "‚úÖ Performance tests passed"
    
    - name: Stop containers
      if: always()
      run: |
        docker-compose -f config/docker/docker-compose.yml down
