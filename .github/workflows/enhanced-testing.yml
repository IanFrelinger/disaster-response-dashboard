name: Enhanced Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Smoke tests - run on every PR
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install -g pnpm
          pnpm install --frozen-lockfile
          
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          
      - name: Run smoke tests
        run: |
          cd frontend
          pnpm test:smoke
          
      - name: Upload smoke test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: smoke-test-results
          path: frontend/test-results/

  # Full test suite - run on main branch and nightly
  full-tests:
    name: Full Test Suite
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        test-type: [unit, edge-cases, contracts, visual-regression, accessibility]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          cd frontend
          npm install -g pnpm
          pnpm install --frozen-lockfile
          pnpm exec playwright install --with-deps
          
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          
      - name: Start backend server
        run: |
          cd backend
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          cd frontend
          pnpm test:unit-enhanced
          
      - name: Run edge case tests
        if: matrix.test-type == 'edge-cases'
        run: |
          cd frontend
          pnpm test:edge-cases
          
      - name: Run contract tests
        if: matrix.test-type == 'contracts'
        run: |
          cd frontend
          pnpm test:contracts
          
      - name: Run visual regression tests
        if: matrix.test-type == 'visual-regression'
        run: |
          cd frontend
          pnpm test:visual-regression
          
      - name: Run accessibility tests
        if: matrix.test-type == 'accessibility'
        run: |
          cd frontend
          pnpm test:accessibility
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ${{ matrix.test-type }}-test-results
          path: frontend/test-results/

  # Performance tests - run on main branch and nightly
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd frontend
          npm install -g pnpm
          pnpm install --frozen-lockfile
          pnpm exec playwright install --with-deps
          
      - name: Run performance tests
        run: |
          cd frontend
          pnpm test:performance
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: frontend/test-results/

  # Chaos tests - run nightly only
  chaos-tests:
    name: Chaos Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd frontend
          npm install -g pnpm
          pnpm install --frozen-lockfile
          pnpm exec playwright install --with-deps
          
      - name: Run chaos tests
        run: |
          cd frontend
          pnpm test:chaos
          
      - name: Upload chaos test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: chaos-test-results
          path: frontend/test-results/

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          cd frontend
          npm install -g pnpm
          pnpm install --frozen-lockfile
          
      - name: Run security audit
        run: |
          cd frontend
          pnpm audit --audit-level moderate
          
      - name: Run secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          cd frontend
          npm install -g pnpm
          pnpm install --frozen-lockfile
          
      - name: Run linting
        run: |
          cd frontend
          pnpm lint
          
      - name: Run type checking
        run: |
          cd frontend
          pnpm typecheck
          
      - name: Run backend linting
        run: |
          cd backend
          pip install ruff
          ruff check .
          
      - name: Run backend type checking
        run: |
          cd backend
          pip install mypy
          mypy .

  # Build and deploy (on main branch)
  build-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [smoke-tests, code-quality, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd frontend
          npm install -g pnpm
          pnpm install --frozen-lockfile
          
      - name: Build application
        run: |
          cd frontend
          pnpm build
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: frontend/dist/

  # Test result summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [smoke-tests, full-tests, performance-tests, chaos-tests, security-scan, code-quality]
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate test summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- Smoke Tests: ${{ needs.smoke-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Full Tests: ${{ needs.full-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Chaos Tests: ${{ needs.chaos-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY

