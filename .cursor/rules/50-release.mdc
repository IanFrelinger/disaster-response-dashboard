# Release and PR Hygiene Standards

## Commit Message Standards

### Semantic Commit Messages
Use semantic commit message format for all commits:

```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

### Commit Types
- **feat**: New feature or functionality
- **fix**: Bug fix
- **docs**: Documentation changes
- **style**: Code style changes (formatting, etc.)
- **refactor**: Code refactoring without changing functionality
- **test**: Adding or updating tests
- **chore**: Maintenance tasks, dependency updates
- **perf**: Performance improvements
- **ci**: CI/CD pipeline changes
- **build**: Build system changes

### Commit Examples
```bash
# Feature addition
feat(map): add 3D terrain layer with elevation visualization

# Bug fix
fix(routing): resolve hazard intersection calculation error

# Documentation
docs(api): update OpenAPI schema for new endpoints

# Performance improvement
perf(validation): optimize layer rendering performance by 40%

# Breaking change
feat(api)!: change route calculation response format

BREAKING CHANGE: Route response now includes safety_score field
```

### Commit Scope Guidelines
- **map**: Map-related functionality (layers, rendering, interactions)
- **api**: Backend API endpoints and services
- **validation**: Validation system and monitoring
- **routing**: Route calculation and optimization
- **hazards**: Hazard detection and processing
- **ui**: User interface components and interactions
- **tests**: Test files and test infrastructure
- **docs**: Documentation files
- **ci**: CI/CD configuration and scripts

## CHANGELOG Management

### CHANGELOG.md Format
Maintain a comprehensive CHANGELOG.md following the [Keep a Changelog](https://keepachangelog.com/) format:

```markdown
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- New 3D terrain visualization layer
- Real-time hazard detection integration
- Performance monitoring dashboard

### Changed
- Updated route calculation algorithm for better accuracy
- Improved map rendering performance by 40%

### Fixed
- Resolved hazard intersection calculation bug
- Fixed layer toggle state persistence issue

### Security
- Enhanced input validation for coordinate data
- Improved API rate limiting configuration

## [1.2.0] - 2024-01-15

### Added
- Emergency unit tracking system
- Multi-hazard visualization support
- Automated route validation

### Changed
- Migrated to React 18 with concurrent features
- Updated Mapbox GL JS to latest version

### Fixed
- Resolved memory leak in layer management
- Fixed coordinate precision issues in route calculation
```

### CHANGELOG Update Requirements
- **Update CHANGELOG.md** for every release-candidate PR
- **Include all user-facing changes** in the changelog
- **Categorize changes** by type (Added, Changed, Fixed, Security, etc.)
- **Include version numbers** and release dates
- **Document breaking changes** clearly

## Release-Candidate PR Requirements

### PR Labeling
When a PR is labeled `release-candidate`, it must include:

1. **Updated CHANGELOG.md** with all changes
2. **Rollback steps** for database/index changes
3. **Migration scripts** if data structure changes
4. **Performance impact assessment**
5. **Security review checklist**

### Rollback Documentation Template
```markdown
## Rollback Steps

### Database Changes
If this release needs to be rolled back, execute the following steps:

1. **Stop the application services**
   ```bash
   docker-compose down
   ```

2. **Restore database from backup**
   ```bash
   # Restore from latest backup before deployment
   pg_restore -h localhost -U postgres -d disaster_response backup_$(date -d '1 day ago' +%Y%m%d).sql
   ```

3. **Revert to previous version**
   ```bash
   git checkout v1.1.0
   docker-compose up -d
   ```

4. **Verify system health**
   ```bash
   curl http://localhost:8000/api/health
   curl http://localhost:8080/health
   ```

### Index Changes
If spatial indices were modified:

1. **Drop new indices**
   ```sql
   DROP INDEX IF EXISTS new_hazard_spatial_idx;
   ```

2. **Recreate previous indices**
   ```sql
   CREATE INDEX hazard_spatial_idx ON hazards USING GIST (geometry);
   ```

### Configuration Changes
If environment variables were added:

1. **Remove new environment variables** from production config
2. **Restore previous configuration** values
3. **Restart services** to apply changes
```

### Migration Scripts
For database schema changes, provide migration scripts:

```sql
-- Migration: Add safety_score to routes table
-- Version: 1.2.0
-- Date: 2024-01-15

-- Add new column
ALTER TABLE evacuation_routes 
ADD COLUMN safety_score DECIMAL(3,2) DEFAULT 1.0;

-- Update existing routes with calculated safety scores
UPDATE evacuation_routes 
SET safety_score = calculate_route_safety_score(id)
WHERE safety_score = 1.0;

-- Create index for performance
CREATE INDEX idx_routes_safety_score ON evacuation_routes(safety_score);

-- Rollback script (for emergency use)
-- ALTER TABLE evacuation_routes DROP COLUMN safety_score;
-- DROP INDEX IF EXISTS idx_routes_safety_score;
```

## PR Template Requirements

### Pull Request Template
Create comprehensive PR templates that include:

```markdown
## Description
Brief description of changes and motivation.

## Type of Change
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Documentation update
- [ ] Performance improvement
- [ ] Security enhancement

## Testing
- [ ] Unit tests pass
- [ ] Integration tests pass
- [ ] E2E tests pass
- [ ] Performance tests meet budgets
- [ ] Manual testing completed

## Performance Impact
- [ ] No performance impact
- [ ] Performance improvement (specify metrics)
- [ ] Performance regression (explain mitigation)

## Security Review
- [ ] No security implications
- [ ] Security enhancement (describe)
- [ ] Potential security impact (explain mitigation)

## Checklist
- [ ] Code follows project style guidelines
- [ ] Self-review completed
- [ ] Documentation updated
- [ ] CHANGELOG.md updated (if release-candidate)
- [ ] Rollback steps documented (if release-candidate)
- [ ] Migration scripts provided (if database changes)

## Related Issues
Closes #123
Relates to #456
```

## Release Process

### Pre-Release Checklist
Before marking a PR as `release-candidate`:

1. **All tests pass** (unit, integration, E2E)
2. **Performance budgets met** (load time < 3s, API < 100ms)
3. **Security review completed**
4. **Documentation updated**
5. **CHANGELOG.md updated**
6. **Rollback plan documented**
7. **Migration scripts tested**

### Release-Candidate Process
1. **Label PR** as `release-candidate`
2. **Run full validation suite** including performance tests
3. **Execute security scan** and review results
4. **Test rollback procedures** in staging environment
5. **Get approval** from designated reviewers
6. **Merge to main branch** after approval

### Post-Release Monitoring
After deployment:

1. **Monitor system health** for 24 hours
2. **Check performance metrics** against budgets
3. **Verify validation system** is functioning
4. **Monitor error rates** and logs
5. **Confirm rollback procedures** are documented and tested

## Version Management

### Semantic Versioning
Follow [Semantic Versioning](https://semver.org/) principles:

- **MAJOR** (1.0.0): Breaking changes
- **MINOR** (1.1.0): New features, backward compatible
- **PATCH** (1.1.1): Bug fixes, backward compatible

### Version Tagging
```bash
# Create version tag
git tag -a v1.2.0 -m "Release version 1.2.0: Emergency unit tracking and multi-hazard support"

# Push tag to remote
git push origin v1.2.0

# Create release notes
gh release create v1.2.0 --title "Version 1.2.0" --notes-file RELEASE_NOTES.md
```

### Release Notes Template
```markdown
# Release Notes - Version 1.2.0

## 🚀 New Features
- Emergency unit tracking system with real-time updates
- Multi-hazard visualization support for complex scenarios
- Automated route validation with 0% hazard intersection guarantee

## 🔧 Improvements
- Enhanced map rendering performance by 40%
- Improved route calculation accuracy
- Better error handling and user feedback

## 🐛 Bug Fixes
- Fixed memory leak in layer management system
- Resolved coordinate precision issues in route calculation
- Corrected hazard intersection detection algorithm

## 🔒 Security
- Enhanced input validation for all coordinate data
- Improved API rate limiting configuration
- Added security headers for all endpoints

## 📊 Performance
- Frontend load time: 2.1s (target: < 3s) ✅
- Backend response time: 85ms (target: < 100ms) ✅
- Layer render time: 3ms (target: 1-5ms) ✅

## 🧪 Testing
- 100% test coverage for new features
- All E2E tests passing
- Performance budgets met
- Security scan passed

## 📋 Migration Notes
- Database schema updated (migration script provided)
- New environment variables required
- Rollback procedures documented

## 🔄 Rollback
If issues are encountered, follow the rollback procedures documented in the PR.
```

## Quality Gates

### Pre-Merge Requirements
- [ ] All tests pass (unit, integration, E2E)
- [ ] Code coverage maintained (>90%)
- [ ] Performance budgets met
- [ ] Security scan passed
- [ ] Documentation updated
- [ ] CHANGELOG.md updated (if applicable)

### Release-Candidate Requirements
- [ ] Full validation suite passes
- [ ] Performance testing completed
- [ ] Security review approved
- [ ] Rollback procedures tested
- [ ] Migration scripts validated
- [ ] Release notes prepared

This release and PR hygiene standard ensures consistent, reliable, and well-documented releases while maintaining the disaster response system's critical performance and security requirements.