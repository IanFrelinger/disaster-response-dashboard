version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    image: disaster-response-backend:production
    container_name: disaster-response-backend-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT_MODE=production
      - USE_SYNTHETIC_DATA=false
      - FLASK_ENV=production
      - PYTHONPATH=/app
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:pass@localhost:5432/disaster}
      - REDIS_URL=${REDIS_URL:-redis://localhost:6379}
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=${CORS_ORIGINS:-https://yourdomain.com}
    volumes:
      - ./backend:/app
      - /app/__pycache__
      - /app/.pytest_cache
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - production-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    image: disaster-response-frontend:production
    container_name: disaster-response-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
      - VITE_ENVIRONMENT_MODE=production
      - VITE_USE_SYNTHETIC_DATA=false
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000/api}
      - VITE_TILE_SERVER_URL=${VITE_TILE_SERVER_URL:-http://localhost:8080}
      - VITE_APP_VERSION=${APP_VERSION:-1.0.0}
    depends_on:
      - backend
      - tileserver
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - production-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Tile Server for Map Data
  tileserver:
    build:
      context: ./tiles
      dockerfile: Dockerfile
      target: production
    image: disaster-response-tileserver:production
    container_name: disaster-response-tileserver-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./tiles:/data:ro
      - tileserver-cache:/cache
    environment:
      - MBTILES_FILE=/data/admin_boundaries.mbtiles
      - CACHE_SIZE=100
      - MAX_ZOOM=14
      - LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - production-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # PostgreSQL Database (Optional - can use RDS)
  postgres:
    image: postgres:15-alpine
    container_name: disaster-response-postgres-prod
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=disaster
      - POSTGRES_USER=${POSTGRES_USER:-disaster_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-disaster_user} -d disaster"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - production-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis Cache (Optional - can use ElastiCache)
  redis:
    image: redis:7-alpine
    container_name: disaster-response-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - production-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Nginx Reverse Proxy (Optional - can use ALB)
  nginx:
    image: nginx:alpine
    container_name: disaster-response-nginx-prod
    restart: unless-stopped
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - tileserver
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - production-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: disaster-response-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - production-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: disaster-response-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - production-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  tileserver-cache:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  production-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: disaster-prod-br0
