"""Type stubs for pandas."""

from typing import Any, Dict, List, Optional, Union, Callable, Iterator, Tuple
import numpy as np

class DataFrame:
    def __init__(self, data: Any = None, index: Any = None, columns: Any = None, dtype: Any = None, copy: bool = False) -> None: ...
    def __getitem__(self, key: Any) -> Any: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def head(self, n: int = 5) -> 'DataFrame': ...
    def tail(self, n: int = 5) -> 'DataFrame': ...
    def shape(self) -> Tuple[int, int]: ...
    def columns(self) -> Any: ...
    def index(self) -> Any: ...
    def values(self) -> Any: ...
    def to_dict(self, orient: str = "dict") -> Dict[str, Any]: ...
    def to_json(self, orient: str = "records") -> str: ...
    def describe(self) -> 'DataFrame': ...
    def info(self) -> None: ...
    def isna(self) -> 'DataFrame': ...
    def isnull(self) -> 'DataFrame': ...
    def fillna(self, value: Any = None, method: Optional[str] = None) -> 'DataFrame': ...
    def dropna(self, axis: int = 0, how: str = "any") -> 'DataFrame': ...
    def groupby(self, by: Any) -> Any: ...
    def sort_values(self, by: Any, ascending: bool = True) -> 'DataFrame': ...
    def merge(self, right: 'DataFrame', how: str = "inner", on: Optional[str] = None) -> 'DataFrame': ...
    def join(self, other: 'DataFrame', how: str = "left") -> 'DataFrame': ...
    def apply(self, func: Callable, axis: int = 0) -> 'DataFrame': ...
    def loc(self) -> Any: ...
    def iloc(self) -> Any: ...
    def at(self, row: Any, col: Any) -> Any: ...
    def iat(self, row: int, col: int) -> Any: ...
    def iterrows(self) -> Iterator[Tuple[Any, Any]]: ...
    def itertuples(self, index: bool = True) -> Iterator[Any]: ...

class Series:
    def __init__(self, data: Any = None, index: Any = None, dtype: Any = None, name: Any = None) -> None: ...
    def __getitem__(self, key: Any) -> Any: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def head(self, n: int = 5) -> 'Series': ...
    def tail(self, n: int = 5) -> 'Series': ...
    def shape(self) -> Tuple[int]: ...
    def name(self) -> Any: ...
    def index(self) -> Any: ...
    def values(self) -> Any: ...
    def to_dict(self) -> Dict[str, Any]: ...
    def to_list(self) -> List[Any]: ...
    def describe(self) -> 'Series': ...
    def isna(self) -> 'Series': ...
    def isnull(self) -> 'Series': ...
    def fillna(self, value: Any = None, method: Optional[str] = None) -> 'Series': ...
    def dropna(self) -> 'Series': ...
    def groupby(self, by: Any) -> Any: ...
    def sort_values(self, ascending: bool = True) -> 'Series': ...
    def apply(self, func: Callable) -> 'Series': ...
    def map(self, arg: Any) -> 'Series': ...
    def max(self) -> Any: ...
    def min(self) -> Any: ...
    def sum(self) -> Any: ...
    def mean(self) -> Any: ...
    def median(self) -> Any: ...
    def std(self) -> Any: ...
    def var(self) -> Any: ...
    def count(self) -> int: ...
    def unique(self) -> Any: ...
    def nunique(self) -> int: ...

def read_csv(filepath_or_buffer: Any, **kwargs: Any) -> DataFrame: ...
def read_json(filepath_or_buffer: Any, **kwargs: Any) -> DataFrame: ...
def read_sql(sql: str, con: Any, **kwargs: Any) -> DataFrame: ...
def concat(objs: List[DataFrame], axis: int = 0, **kwargs: Any) -> DataFrame: ...
def merge(left: DataFrame, right: DataFrame, **kwargs: Any) -> DataFrame: ...
def to_datetime(arg: Any, **kwargs: Any) -> Any: ...
def to_numeric(arg: Any, **kwargs: Any) -> Any: ...
def isnull(obj: Any) -> Any: ...
def notnull(obj: Any) -> Any: ...
def isna(obj: Any) -> Any: ...
def notna(obj: Any) -> Any: ...
