"""Type stubs for structlog."""

from typing import Any, Dict, Optional, Union, Callable, TypeVar

T = TypeVar('T')

def get_logger(name: Optional[str] = None) -> 'BoundLogger': ...
def configure(**kwargs: Any) -> None: ...
def bind(**kwargs: Any) -> Any: ...
def unbind(*keys: str) -> Any: ...
def clear_processors() -> None: ...
def reset_defaults() -> None: ...

class BoundLogger:
    def bind(self, **kwargs: Any) -> 'BoundLogger': ...
    def unbind(self, *keys: str) -> 'BoundLogger': ...
    def info(self, event: str, **kwargs: Any) -> None: ...
    def error(self, event: str, **kwargs: Any) -> None: ...
    def warning(self, event: str, **kwargs: Any) -> None: ...
    def debug(self, event: str, **kwargs: Any) -> None: ...
    def critical(self, event: str, **kwargs: Any) -> None: ...
    def exception(self, event: str, **kwargs: Any) -> None: ...

class PrintLogger:
    def info(self, msg: str) -> None: ...
    def error(self, msg: str) -> None: ...
    def warning(self, msg: str) -> None: ...
    def debug(self, msg: str) -> None: ...
    def critical(self, msg: str) -> None: ...
    def exception(self, msg: str) -> None: ...
