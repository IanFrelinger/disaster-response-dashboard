"""Type stubs for h3."""

from typing import List, Tuple, Union, Optional

def lat_lng_to_cell(lat: float, lng: float, resolution: int) -> str: ...
def cell_to_lat_lng(h: str) -> Tuple[float, float]: ...
def cell_to_boundary(h: str) -> List[Tuple[float, float]]: ...
def grid_disk(h: str, k: int) -> List[str]: ...
def grid_ring(h: str, k: int) -> List[str]: ...
def cell_to_parent(h: str, parent_res: int) -> str: ...
def cell_to_children(h: str, child_res: int) -> List[str]: ...
def get_resolution(h: str) -> int: ...
def is_valid_cell(h: str) -> bool: ...
def compact_cells(h: List[str]) -> List[str]: ...
def uncompact_cells(h: List[str], res: int) -> List[str]: ...
def cells_to_multi_polygon(h: List[str]) -> List[List[List[Tuple[float, float]]]]: ...
def polygon_to_cells(polygon: List[List[Tuple[float, float]]], res: int) -> List[str]: ...
def cell_to_center_child(h: str, child_res: int) -> str: ...
def cell_to_child_pos(h: str, parent: str) -> int: ...
def child_pos_to_cell(pos: int, parent: str, child_res: int) -> str: ...
def cell_to_local_ij(h: str, origin: str) -> Tuple[int, int]: ...
def local_ij_to_cell(i: int, j: int, origin: str) -> str: ...
def grid_distance(h1: str, h2: str) -> int: ...
def grid_path_cells(h1: str, h2: str) -> List[str]: ...
def cell_to_string(h: int) -> str: ...
def string_to_cell(h: str) -> int: ...
def num_cells(resolution: int) -> int: ...
def get_pentagons(resolution: int) -> List[str]: ...
def get_icosahedron_faces(h: str) -> List[int]: ...
def cell_area(h: str, unit: str = "km^2") -> float: ...
def edge_length(h: str, unit: str = "km") -> float: ...
def get_hexagon_edge_length_avg(resolution: int, unit: str = "km") -> float: ...
def get_hexagon_area_avg(resolution: int, unit: str = "km^2") -> float: ...
