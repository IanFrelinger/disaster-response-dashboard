"""Type stubs for requests."""

from typing import Any, Dict, List, Optional, Union, Callable, Iterator, Tuple
from typing import TextIO, BinaryIO

class Response:
    def __init__(self) -> None: ...
    @property
    def status_code(self) -> int: ...
    @property
    def text(self) -> str: ...
    @property
    def content(self) -> bytes: ...
    @property
    def json(self) -> Any: ...
    @property
    def headers(self) -> Dict[str, str]: ...
    @property
    def url(self) -> str: ...
    @property
    def reason(self) -> str: ...
    def raise_for_status(self) -> None: ...
    def iter_content(self, chunk_size: int = 1, decode_unicode: bool = False) -> Iterator[bytes]: ...
    def iter_lines(self, chunk_size: int = 512, decode_unicode: bool = False) -> Iterator[str]: ...

def get(url: str, **kwargs: Any) -> Response: ...
def post(url: str, data: Any = None, json: Any = None, **kwargs: Any) -> Response: ...
def put(url: str, data: Any = None, **kwargs: Any) -> Response: ...
def delete(url: str, **kwargs: Any) -> Response: ...
def head(url: str, **kwargs: Any) -> Response: ...
def options(url: str, **kwargs: Any) -> Response: ...
def patch(url: str, data: Any = None, **kwargs: Any) -> Response: ...
def request(method: str, url: str, **kwargs: Any) -> Response: ...

class Session:
    def __init__(self) -> None: ...
    def get(self, url: str, **kwargs: Any) -> Response: ...
    def post(self, url: str, data: Any = None, json: Any = None, **kwargs: Any) -> Response: ...
    def put(self, url: str, data: Any = None, **kwargs: Any) -> Response: ...
    def delete(self, url: str, **kwargs: Any) -> Response: ...
    def head(self, url: str, **kwargs: Any) -> Response: ...
    def options(self, url: str, **kwargs: Any) -> Response: ...
    def patch(self, url: str, data: Any = None, **kwargs: Any) -> Response: ...
    def request(self, method: str, url: str, **kwargs: Any) -> Response: ...
    def close(self) -> None: ...

def session() -> Session: ...
