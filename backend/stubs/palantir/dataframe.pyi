"""Type stubs for palantir.dataframe."""

from typing import Any, Dict, List, Optional, Union, Callable

def read_csv(path: str, **kwargs: Any) -> Any: ...
def read_parquet(path: str, **kwargs: Any) -> Any: ...
def read_json(path: str, **kwargs: Any) -> Any: ...
def write_csv(data: Any, path: str, **kwargs: Any) -> None: ...
def write_parquet(data: Any, path: str, **kwargs: Any) -> None: ...
def write_json(data: Any, path: str, **kwargs: Any) -> None: ...

class DataFrame:
    def __init__(self, data: Any) -> None: ...
    def head(self, n: int = 5) -> 'DataFrame': ...
    def tail(self, n: int = 5) -> 'DataFrame': ...
    def shape(self) -> tuple: ...
    def columns(self) -> List[str]: ...
    def dtypes(self) -> Any: ...
    def info(self) -> None: ...
    def describe(self) -> 'DataFrame': ...
    def dropna(self, **kwargs: Any) -> 'DataFrame': ...
    def fillna(self, value: Any, **kwargs: Any) -> 'DataFrame': ...
    def groupby(self, by: Union[str, List[str]]) -> Any: ...
    def sort_values(self, by: Union[str, List[str]], **kwargs: Any) -> 'DataFrame': ...
    def filter(self, items: List[str]) -> 'DataFrame': ...
    def select_dtypes(self, include: Any = None, exclude: Any = None) -> 'DataFrame': ...
    def to_dict(self, orient: str = "dict") -> Dict[str, Any]: ...
    def to_list(self) -> List[Any]: ...
    def to_csv(self, path: str, **kwargs: Any) -> None: ...
    def to_parquet(self, path: str, **kwargs: Any) -> None: ...
    def to_json(self, path: str, **kwargs: Any) -> None: ...
