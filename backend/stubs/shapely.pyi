"""Type stubs for shapely."""

from typing import Any, Dict, List, Optional, Union, Callable, Iterator, Tuple

class Point:
    def __init__(self, x: float, y: float) -> None: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @property
    def coords(self) -> Tuple[float, float]: ...
    def distance(self, other: 'Point') -> float: ...
    def buffer(self, distance: float) -> 'Polygon': ...
    def within(self, other: Any) -> bool: ...
    def contains(self, other: Any) -> bool: ...
    def intersects(self, other: Any) -> bool: ...
    def touches(self, other: Any) -> bool: ...
    def crosses(self, other: Any) -> bool: ...
    def overlaps(self, other: Any) -> bool: ...
    def covers(self, other: Any) -> bool: ...
    def covered_by(self, other: Any) -> bool: ...
    def equals(self, other: Any) -> bool: ...
    def is_empty(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def bounds(self) -> Tuple[float, float, float, float]: ...
    def area(self) -> float: ...
    def length(self) -> float: ...
    def centroid(self) -> 'Point': ...
    def envelope(self) -> 'Polygon': ...
    def convex_hull(self) -> Any: ...
    def boundary(self) -> Any: ...
    def exterior(self) -> Any: ...
    def interiors(self) -> Any: ...
    def geom_type(self) -> str: ...
    def wkt(self) -> str: ...
    def wkb(self) -> bytes: ...
    def to_wkt(self) -> str: ...
    def to_wkb(self) -> bytes: ...

class Polygon:
    def __init__(self, shell: Any, holes: Optional[List[Any]] = None) -> None: ...
    @property
    def exterior(self) -> Any: ...
    @property
    def interiors(self) -> Any: ...
    def area(self) -> float: ...
    def length(self) -> float: ...
    def centroid(self) -> Point: ...
    def bounds(self) -> Tuple[float, float, float, float]: ...
    def distance(self, other: Any) -> float: ...
    def within(self, other: Any) -> bool: ...
    def contains(self, other: Any) -> bool: ...
    def intersects(self, other: Any) -> bool: ...
    def touches(self, other: Any) -> bool: ...
    def crosses(self, other: Any) -> bool: ...
    def overlaps(self, other: Any) -> bool: ...
    def covers(self, other: Any) -> bool: ...
    def covered_by(self, other: Any) -> bool: ...
    def equals(self, other: Any) -> bool: ...
    def is_empty(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def envelope(self) -> 'Polygon': ...
    def convex_hull(self) -> Any: ...
    def boundary(self) -> Any: ...
    def geom_type(self) -> str: ...
    def wkt(self) -> str: ...
    def wkb(self) -> bytes: ...
    def to_wkt(self) -> str: ...
    def to_wkb(self) -> bytes: ...

class LineString:
    def __init__(self, coordinates: List[Tuple[float, float]]) -> None: ...
    @property
    def coords(self) -> List[Tuple[float, float]]: ...
    def length(self) -> float: ...
    def distance(self, other: Any) -> float: ...
    def within(self, other: Any) -> bool: ...
    def contains(self, other: Any) -> bool: ...
    def intersects(self, other: Any) -> bool: ...
    def touches(self, other: Any) -> bool: ...
    def crosses(self, other: Any) -> bool: ...
    def overlaps(self, other: Any) -> bool: ...
    def covers(self, other: Any) -> bool: ...
    def covered_by(self, other: Any) -> bool: ...
    def equals(self, other: Any) -> bool: ...
    def is_empty(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def bounds(self) -> Tuple[float, float, float, float]: ...
    def centroid(self) -> Point: ...
    def envelope(self) -> Polygon: ...
    def convex_hull(self) -> Any: ...
    def boundary(self) -> Any: ...
    def geom_type(self) -> str: ...
    def wkt(self) -> str: ...
    def wkb(self) -> bytes: ...
    def to_wkt(self) -> str: ...
    def to_wkb(self) -> bytes: ...

class MultiPoint:
    def __init__(self, points: List[Point]) -> None: ...
    def area(self) -> float: ...
    def length(self) -> float: ...
    def distance(self, other: Any) -> float: ...
    def within(self, other: Any) -> bool: ...
    def contains(self, other: Any) -> bool: ...
    def intersects(self, other: Any) -> bool: ...
    def touches(self, other: Any) -> bool: ...
    def crosses(self, other: Any) -> bool: ...
    def overlaps(self, other: Any) -> bool: ...
    def covers(self, other: Any) -> bool: ...
    def covered_by(self, other: Any) -> bool: ...
    def equals(self, other: Any) -> bool: ...
    def is_empty(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def bounds(self) -> Tuple[float, float, float, float]: ...
    def centroid(self) -> Point: ...
    def envelope(self) -> Polygon: ...
    def convex_hull(self) -> Any: ...
    def boundary(self) -> Any: ...
    def geom_type(self) -> str: ...
    def wkt(self) -> str: ...
    def wkb(self) -> bytes: ...
    def to_wkt(self) -> str: ...
    def to_wkb(self) -> bytes: ...

class MultiPolygon:
    def __init__(self, polygons: List[Polygon]) -> None: ...
    def area(self) -> float: ...
    def length(self) -> float: ...
    def distance(self, other: Any) -> float: ...
    def within(self, other: Any) -> bool: ...
    def contains(self, other: Any) -> bool: ...
    def intersects(self, other: Any) -> bool: ...
    def touches(self, other: Any) -> bool: ...
    def crosses(self, other: Any) -> bool: ...
    def overlaps(self, other: Any) -> bool: ...
    def covers(self, other: Any) -> bool: ...
    def covered_by(self, other: Any) -> bool: ...
    def equals(self, other: Any) -> bool: ...
    def is_empty(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def bounds(self) -> Tuple[float, float, float, float]: ...
    def centroid(self) -> Point: ...
    def envelope(self) -> Polygon: ...
    def convex_hull(self) -> Any: ...
    def boundary(self) -> Any: ...
    def geom_type(self) -> str: ...
    def wkt(self) -> str: ...
    def wkb(self) -> bytes: ...
    def to_wkt(self) -> str: ...
    def to_wkb(self) -> bytes: ...

class MultiLineString:
    def __init__(self, lines: List[LineString]) -> None: ...
    def area(self) -> float: ...
    def length(self) -> float: ...
    def distance(self, other: Any) -> float: ...
    def within(self, other: Any) -> bool: ...
    def contains(self, other: Any) -> bool: ...
    def intersects(self, other: Any) -> bool: ...
    def touches(self, other: Any) -> bool: ...
    def crosses(self, other: Any) -> bool: ...
    def overlaps(self, other: Any) -> bool: ...
    def covers(self, other: Any) -> bool: ...
    def covered_by(self, other: Any) -> bool: ...
    def equals(self, other: Any) -> bool: ...
    def is_empty(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def bounds(self) -> Tuple[float, float, float, float]: ...
    def centroid(self) -> Point: ...
    def envelope(self) -> Polygon: ...
    def convex_hull(self) -> Any: ...
    def boundary(self) -> Any: ...
    def geom_type(self) -> str: ...
    def wkt(self) -> str: ...
    def wkb(self) -> bytes: ...
    def to_wkt(self) -> str: ...
    def to_wkb(self) -> bytes: ...

class GeometryCollection:
    def __init__(self, geometries: List[Any]) -> None: ...
    def area(self) -> float: ...
    def length(self) -> float: ...
    def distance(self, other: Any) -> float: ...
    def within(self, other: Any) -> bool: ...
    def contains(self, other: Any) -> bool: ...
    def intersects(self, other: Any) -> bool: ...
    def touches(self, other: Any) -> bool: ...
    def crosses(self, other: Any) -> bool: ...
    def overlaps(self, other: Any) -> bool: ...
    def covers(self, other: Any) -> bool: ...
    def covered_by(self, other: Any) -> bool: ...
    def equals(self, other: Any) -> bool: ...
    def is_empty(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def bounds(self) -> Tuple[float, float, float, float]: ...
    def centroid(self) -> Point: ...
    def envelope(self) -> Polygon: ...
    def convex_hull(self) -> Any: ...
    def boundary(self) -> Any: ...
    def geom_type(self) -> str: ...
    def wkt(self) -> str: ...
    def wkb(self) -> bytes: ...
    def to_wkt(self) -> str: ...
    def to_wkb(self) -> bytes: ...

def from_wkt(wkt: str) -> Any: ...
def from_wkb(wkb: bytes) -> Any: ...
def from_geojson(geojson: str) -> Any: ...
def to_wkt(geom: Any) -> str: ...
def to_wkb(geom: Any) -> bytes: ...
def to_geojson(geom: Any) -> str: ...
def is_valid(geom: Any) -> bool: ...
def is_empty(geom: Any) -> bool: ...
def distance(geom1: Any, geom2: Any) -> float: ...
def area(geom: Any) -> float: ...
def length(geom: Any) -> float: ...
def bounds(geom: Any) -> Tuple[float, float, float, float]: ...
def centroid(geom: Any) -> Point: ...
def envelope(geom: Any) -> Polygon: ...
def convex_hull(geom: Any) -> Any: ...
def buffer(geom: Any, distance: float) -> Any: ...
def simplify(geom: Any, tolerance: float) -> Any: ...
def unary_union(geoms: List[Any]) -> Any: ...
def cascaded_union(geoms: List[Any]) -> Any: ...
def intersection(geom1: Any, geom2: Any) -> Any: ...
def union(geom1: Any, geom2: Any) -> Any: ...
def difference(geom1: Any, geom2: Any) -> Any: ...
def symmetric_difference(geom1: Any, geom2: Any) -> Any: ...
def contains(geom1: Any, geom2: Any) -> bool: ...
def within(geom1: Any, geom2: Any) -> bool: ...
def intersects(geom1: Any, geom2: Any) -> bool: ...
def touches(geom1: Any, geom2: Any) -> bool: ...
def crosses(geom1: Any, geom2: Any) -> bool: ...
def overlaps(geom1: Any, geom2: Any) -> bool: ...
def covers(geom1: Any, geom2: Any) -> bool: ...
def covered_by(geom1: Any, geom2: Any) -> bool: ...
def equals(geom1: Any, geom2: Any) -> bool: ...
