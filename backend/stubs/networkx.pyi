"""Type stubs for networkx."""

from typing import Any, Dict, List, Optional, Union, Callable, Iterator, Tuple, Set

class Graph:
    def __init__(self, **kwargs: Any) -> None: ...
    def add_node(self, node: Any, **kwargs: Any) -> None: ...
    def add_edge(self, u: Any, v: Any, **kwargs: Any) -> None: ...
    def add_nodes_from(self, nodes: List[Any], **kwargs: Any) -> None: ...
    def add_edges_from(self, edges: List[Tuple[Any, Any]], **kwargs: Any) -> None: ...
    def remove_node(self, node: Any) -> None: ...
    def remove_edge(self, u: Any, v: Any) -> None: ...
    def nodes(self) -> List[Any]: ...
    def edges(self) -> List[Tuple[Any, Any]]: ...
    def neighbors(self, node: Any) -> Iterator[Any]: ...
    def degree(self, node: Any) -> int: ...
    def has_node(self, node: Any) -> bool: ...
    def has_edge(self, u: Any, v: Any) -> bool: ...
    def number_of_nodes(self) -> int: ...
    def number_of_edges(self) -> int: ...
    def subgraph(self, nodes: List[Any]) -> 'Graph': ...
    def copy(self) -> 'Graph': ...

def shortest_path(G: Graph, source: Any, target: Any) -> List[Any]: ...
def shortest_path_length(G: Graph, source: Any, target: Any) -> int: ...
def all_pairs_shortest_path(G: Graph) -> Dict[Any, Dict[Any, List[Any]]]: ...
def all_pairs_shortest_path_length(G: Graph) -> Dict[Any, Dict[Any, int]]: ...
def connected_components(G: Graph) -> Iterator[Set[Any]]: ...
def is_connected(G: Graph) -> bool: ...
def density(G: Graph) -> float: ...
def clustering(G: Graph) -> Dict[Any, float]: ...
def average_clustering(G: Graph) -> float: ...
